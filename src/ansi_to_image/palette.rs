use std::fmt::Debug;

use crate::ansi_to_image::color::{Color, ColorType};

#[allow(dead_code)]
#[derive(Debug)]
pub enum Palette {
    Vscode,
    Xterm,
    Test,
}

#[derive(Debug)]
pub struct PaletteData {
    pub primary_foreground: [u8; 3],
    pub primary_background: [u8; 3],

    pub black: [u8; 3],
    pub red: [u8; 3],
    pub green: [u8; 3],
    pub yellow: [u8; 3],
    pub blue: [u8; 3],
    pub magenta: [u8; 3],
    pub cyan: [u8; 3],
    pub white: [u8; 3],

    pub bright_black: [u8; 3],
    pub bright_red: [u8; 3],
    pub bright_green: [u8; 3],
    pub bright_yellow: [u8; 3],
    pub bright_blue: [u8; 3],
    pub bright_magenta: [u8; 3],
    pub bright_cyan: [u8; 3],
    pub bright_white: [u8; 3],

    pub fixed: [[u8; 3]; 256],
}

impl Palette {
    fn palette(&self) -> PaletteData {
        match self {
            Palette::Vscode => palette_vscode(),
            Palette::Xterm => palette_xterm(),
            Palette::Test => palette_test(),
        }
    }
    pub(super) fn from_name(name: String) -> Option<Palette> {
        match name.to_lowercase().as_str() {
            "vscode" => Some(Palette::Vscode),
            "xterm" => Some(Palette::Xterm),
            _ => None,
        }
    }
    pub fn list() -> Vec<String> {
        vec!["vscode".to_string(), "xterm".to_string()]
    }
    pub(super) fn get_color(&self, color: ColorType) -> [u8; 3] {
        let palette = self.palette();

        match color {
            ColorType::PrimaryForeground => palette.primary_foreground,
            ColorType::PrimaryBackground => palette.primary_background,
            ColorType::Rgb { field1: rgb } => [rgb.0, rgb.1, rgb.2],

            ColorType::Normal(color) => match color {
                Color::Black => palette.black,
                Color::Red => palette.red,
                Color::Green => palette.green,
                Color::Yellow => palette.yellow,
                Color::Blue => palette.blue,
                Color::Magenta => palette.magenta,
                Color::Cyan => palette.cyan,
                Color::White => palette.white,
            },

            ColorType::Bright(color) => match color {
                Color::Black => palette.bright_black,
                Color::Red => palette.bright_red,
                Color::Green => palette.bright_green,
                Color::Yellow => palette.bright_yellow,
                Color::Blue => palette.bright_blue,
                Color::Magenta => palette.bright_magenta,
                Color::Cyan => palette.bright_cyan,
                Color::White => palette.bright_white,
            },

            ColorType::Fixed(num) => palette.fixed[num as usize],
        }
    }
}

fn palette_vscode() -> PaletteData {
    PaletteData {
        // primary_background: "0x161616".parse().unwrap()
        // primary_foreground: "0xf2f2f2".parse().unwrap()
        primary_foreground: [229, 229, 229],
        primary_background: [0, 0, 0],

        black: [0, 0, 0],
        red: [205, 49, 49],
        green: [13, 188, 121],
        yellow: [229, 229, 16],
        blue: [36, 114, 200],
        magenta: [188, 63, 188],
        cyan: [17, 168, 205],
        white: [229, 229, 229],

        bright_black: [102, 102, 102],
        bright_red: [241, 76, 76],
        bright_green: [35, 209, 139],
        bright_yellow: [245, 245, 67],
        bright_blue: [59, 142, 234],
        bright_magenta: [214, 112, 214],
        bright_cyan: [41, 184, 219],
        bright_white: [229, 229, 229],

        fixed: fixed_colors(),
    }
}
fn palette_xterm() -> PaletteData {
    PaletteData {
        // primary_background: "0x161616".parse().unwrap()
        // primary_foreground: "0xf2f2f2".parse().unwrap()
        primary_foreground: [229, 229, 229],
        primary_background: [0, 0, 0],

        black: [0, 0, 0],
        red: [205, 0, 0],
        green: [0, 205, 0],
        yellow: [205, 205, 0],
        blue: [0, 0, 238],
        magenta: [205, 0, 205],
        cyan: [0, 205, 205],
        white: [229, 229, 229],

        bright_black: [127, 127, 127],
        bright_red: [255, 0, 0],
        bright_green: [0, 252, 0],
        bright_yellow: [255, 255, 0],
        bright_blue: [0, 0, 252],
        bright_magenta: [255, 0, 255],
        bright_cyan: [0, 255, 255],
        bright_white: [255, 255, 255],

        fixed: fixed_colors(),
    }
}

fn palette_test() -> PaletteData {
    PaletteData {
        // primary_background: "0x161616".parse().unwrap()
        // primary_foreground: "0xf2f2f2".parse().unwrap()
        primary_foreground: [0, 0, 0],
        primary_background: [255, 255, 255],

        black: [0, 0, 0],
        red: [255, 0, 0],
        green: [0, 255, 0],
        yellow: [249, 168, 37],
        blue: [0, 0, 255],
        magenta: [168, 37, 191],
        cyan: [0, 131, 143],
        white: [255, 255, 255],

        bright_black: [44, 44, 44],
        bright_red: [198, 40, 40],
        bright_green: [85, 139, 46],
        bright_yellow: [249, 168, 37],
        bright_blue: [21, 101, 193],
        bright_magenta: [168, 37, 191],
        bright_cyan: [0, 131, 143],
        bright_white: [255, 255, 255],

        fixed: fixed_colors(),
    }
}

fn fixed_colors() -> [[u8; 3]; 256] {
    [
        [0, 0, 0],
        [128, 0, 0],
        [0, 128, 0],
        [128, 128, 0],
        [0, 0, 128],
        [128, 0, 128],
        [0, 128, 128],
        [192, 192, 192],
        [128, 128, 128],
        [255, 0, 0],
        [0, 255, 0],
        [255, 255, 0],
        [0, 0, 255],
        [255, 0, 255],
        [0, 255, 255],
        [255, 255, 255],
        [0, 0, 0],
        [0, 0, 95],
        [0, 0, 135],
        [0, 0, 175],
        [0, 0, 215],
        [0, 0, 255],
        [0, 95, 0],
        [0, 95, 95],
        [0, 95, 135],
        [0, 95, 175],
        [0, 95, 215],
        [0, 95, 255],
        [0, 135, 0],
        [0, 135, 95],
        [0, 135, 135],
        [0, 135, 175],
        [0, 135, 215],
        [0, 135, 255],
        [0, 175, 0],
        [0, 175, 95],
        [0, 175, 135],
        [0, 175, 175],
        [0, 175, 215],
        [0, 175, 255],
        [0, 215, 0],
        [0, 215, 95],
        [0, 215, 135],
        [0, 215, 175],
        [0, 215, 215],
        [0, 215, 255],
        [0, 255, 0],
        [0, 255, 95],
        [0, 255, 135],
        [0, 255, 175],
        [0, 255, 215],
        [0, 255, 255],
        [95, 0, 0],
        [95, 0, 95],
        [95, 0, 135],
        [95, 0, 175],
        [95, 0, 215],
        [95, 0, 255],
        [95, 95, 0],
        [95, 95, 95],
        [95, 95, 135],
        [95, 95, 175],
        [95, 95, 215],
        [95, 95, 255],
        [95, 135, 0],
        [95, 135, 95],
        [95, 135, 135],
        [95, 135, 175],
        [95, 135, 215],
        [95, 135, 255],
        [95, 175, 0],
        [95, 175, 95],
        [95, 175, 135],
        [95, 175, 175],
        [95, 175, 215],
        [95, 175, 255],
        [95, 215, 0],
        [95, 215, 95],
        [95, 215, 135],
        [95, 215, 175],
        [95, 215, 215],
        [95, 215, 255],
        [95, 255, 0],
        [95, 255, 95],
        [95, 255, 135],
        [95, 255, 175],
        [95, 255, 215],
        [95, 255, 255],
        [135, 0, 0],
        [135, 0, 95],
        [135, 0, 135],
        [135, 0, 175],
        [135, 0, 215],
        [135, 0, 255],
        [135, 95, 0],
        [135, 95, 95],
        [135, 95, 135],
        [135, 95, 175],
        [135, 95, 215],
        [135, 95, 255],
        [135, 135, 0],
        [135, 135, 95],
        [135, 135, 135],
        [135, 135, 175],
        [135, 135, 215],
        [135, 135, 255],
        [135, 175, 0],
        [135, 175, 95],
        [135, 175, 135],
        [135, 175, 175],
        [135, 175, 215],
        [135, 175, 255],
        [135, 215, 0],
        [135, 215, 95],
        [135, 215, 135],
        [135, 215, 175],
        [135, 215, 215],
        [135, 215, 255],
        [135, 255, 0],
        [135, 255, 95],
        [135, 255, 135],
        [135, 255, 175],
        [135, 255, 215],
        [135, 255, 255],
        [175, 0, 0],
        [175, 0, 95],
        [175, 0, 135],
        [175, 0, 175],
        [175, 0, 215],
        [175, 0, 255],
        [175, 95, 0],
        [175, 95, 95],
        [175, 95, 135],
        [175, 95, 175],
        [175, 95, 215],
        [175, 95, 255],
        [175, 135, 0],
        [175, 135, 95],
        [175, 135, 135],
        [175, 135, 175],
        [175, 135, 215],
        [175, 135, 255],
        [175, 175, 0],
        [175, 175, 95],
        [175, 175, 135],
        [175, 175, 175],
        [175, 175, 215],
        [175, 175, 255],
        [175, 215, 0],
        [175, 215, 95],
        [175, 215, 135],
        [175, 215, 175],
        [175, 215, 215],
        [175, 215, 255],
        [175, 255, 0],
        [175, 255, 95],
        [175, 255, 135],
        [175, 255, 175],
        [175, 255, 215],
        [175, 255, 255],
        [215, 0, 0],
        [215, 0, 95],
        [215, 0, 135],
        [215, 0, 175],
        [215, 0, 215],
        [215, 0, 255],
        [215, 95, 0],
        [215, 95, 95],
        [215, 95, 135],
        [215, 95, 175],
        [215, 95, 215],
        [215, 95, 255],
        [215, 135, 0],
        [215, 135, 95],
        [215, 135, 135],
        [215, 135, 175],
        [215, 135, 215],
        [215, 135, 255],
        [215, 175, 0],
        [215, 175, 95],
        [215, 175, 135],
        [215, 175, 175],
        [215, 175, 215],
        [215, 175, 255],
        [215, 215, 0],
        [215, 215, 95],
        [215, 215, 135],
        [215, 215, 175],
        [215, 215, 215],
        [215, 215, 255],
        [215, 255, 0],
        [215, 255, 95],
        [215, 255, 135],
        [215, 255, 175],
        [215, 255, 215],
        [215, 255, 255],
        [255, 0, 0],
        [255, 0, 95],
        [255, 0, 135],
        [255, 0, 175],
        [255, 0, 215],
        [255, 0, 255],
        [255, 95, 0],
        [255, 95, 95],
        [255, 95, 135],
        [255, 95, 175],
        [255, 95, 215],
        [255, 95, 255],
        [255, 135, 0],
        [255, 135, 95],
        [255, 135, 135],
        [255, 135, 175],
        [255, 135, 215],
        [255, 135, 255],
        [255, 175, 0],
        [255, 175, 95],
        [255, 175, 135],
        [255, 175, 175],
        [255, 175, 215],
        [255, 175, 255],
        [255, 215, 0],
        [255, 215, 95],
        [255, 215, 135],
        [255, 215, 175],
        [255, 215, 215],
        [255, 215, 255],
        [255, 255, 0],
        [255, 255, 95],
        [255, 255, 135],
        [255, 255, 175],
        [255, 255, 215],
        [255, 255, 255],
        [8, 8, 8],
        [18, 18, 18],
        [28, 28, 28],
        [38, 38, 38],
        [48, 48, 48],
        [58, 58, 58],
        [68, 68, 68],
        [78, 78, 78],
        [88, 88, 88],
        [98, 98, 98],
        [108, 108, 108],
        [118, 118, 118],
        [128, 128, 128],
        [138, 138, 138],
        [148, 148, 148],
        [158, 158, 158],
        [168, 168, 168],
        [178, 178, 178],
        [188, 188, 188],
        [198, 198, 198],
        [208, 208, 208],
        [218, 218, 218],
        [228, 228, 228],
        [238, 238, 238],
    ]
}
